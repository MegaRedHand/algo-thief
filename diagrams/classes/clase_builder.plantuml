@startuml

interface EscenarioBuilder {
    + {abstract} construirCon(contadorDeDificultad, fuenteDeDatos): Escenario
    + {abstract} obtenerCronometro(): Cronometro
}

class RandomBuilder implements EscenarioBuilder {
    - cronometro: Cronometro
    + construirCon(contadorDeDificultad, fuenteDeDatos): Escenario
    + obtenerCronometro(): Cronometro
}

class EscenarioBuilderManual implements EscenarioBuilder {
    - cronometro: Cronometro
    - ladron: Ladron
    - objetoRobado: ObjetoRobado
    + EscenarioBuilderManual()
    + conCronometro(cronometro): this
    + conObjetoRobado(nombre)
    + conLadron(ladron)
    + conCiudad(ciudadBuilders: CiudadBuilder[*])
    + construirCon(contadorDeDificultad, fuenteDeDatos) : Escenario
    + obtenerCronometro(): Cronometro
}

class CiudadBuilder {
    - datosCiudad: Map<String, ?>
    - datosSiguienteCiudad: Map<String, ?>
    - adyacentes: String[*]
    + CiudadBuilder(datosCiudad)
    + lePertenece(objetoRobado): boolean
    + conEdificios(edificioBuilders: EdificioBuilder[*]): this
    + conPasajesA(buildersAdyacentes: CiudadBuilders[*])
    + conPistasPara(builderSiguienteCiudad: CiudadBuilder): this
    + construirCon(rango, descripcionSospechoso) : Ciudad
}

interface FuenteDeDatos {
    + crearCiudadBuilders(): CiudadBuilder[*]
    + getComputadora(): Computadora
}

interface Rango
abstract class EdificioBuilder
abstract class ObjetoRobado

EscenarioBuilder .> FuenteDeDatos
EscenarioBuilderManual "1" o-- "*" CiudadBuilder
EscenarioBuilderManual .> Escenario
CiudadBuilder .> Ciudad
CiudadBuilder ..> ObjetoRobado
Edificio <. CiudadBuilder
Rango <.. CiudadBuilder
DescripcionSospechoso <.. CiudadBuilder
CiudadBuilder "1" o-- "*" EdificioBuilder

@enduml
