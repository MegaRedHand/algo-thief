@startuml

class Policia {
    + registrarArresto()
}

interface Rango {
    + {abstract} actualizar(cantidadDeArrestos: int): Rango
    + {abstract} tiempoDeViaje(distanciaEnKms: int): int
    + {abstract} generarPistaCon(generadorDePista, datosDeCiudad, descripcionSospechoso): Pista
}

abstract class RangoLineal implements Rango {
    - arrestosParaActualizar: int
    - velocidadDeViaje: int
    # RangoLineal(arrestosParaActualizar, velocidadDeViaje)
    + tiempoDeViaje(distanciaEnKms: int): int
    + actualizar(cantidadDeArrestos: int): Rango
    - {abstract} siguiente(): Rango
}

class Novato extends RangoLineal {
    + Novato()
    + generarPistaCon(gen, datos, descripcion): Pista
    - siguiente(): Rango
}
class Detective extends RangoLineal {
    + Detective()
    + generarPistaCon(gen, datos, descripcion): Pista
    - siguiente(): Rango
}
class Investigador extends RangoLineal {
    + Investigador()
    + generarPistaCon(gen, datos, descripcion): Pista
    - siguiente(): Rango
}
class Sargento extends RangoLineal {
    + Sargento()
    + generarPistaCon(gen, datos, descripcion): Pista
    - siguiente(): Rango
}

class ContadorDeDificultad {
    - cantidadDeArrestos : int
    + ContadorDeDificultad(rangoInicial, arrestos)
    + registrarArresto()
    + arrestos(): int
    + rango(): Rango
    + obtenerObjetosRobados(fuenteDeDatos): ObjetosRobados[*]
}

interface FuenteDeDatos {
    + obtenerObjetosComunes(): Comun[*]
    + obtenerObjetosValiosos(): Valiosos[*]
    + obtenerObjetosMuyValiosos(): MuyValiosos[*]
}

ContadorDeDificultad .> FuenteDeDatos
Policia "1" o-- "1" ContadorDeDificultad
ContadorDeDificultad "1" o-- "1" Rango
Novato::siguiente .> Detective::Detective
Detective::siguiente .> Investigador::Investigador
Investigador::siguiente .> Sargento::Sargento

@enduml
