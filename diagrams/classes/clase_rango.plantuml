@startuml

class Detective {
    + registrarArresto()
}

interface Rango {
    + {abstract} tiempoDeViaje(distanciaEnKms: int): int
    + {abstract} actualizar(cantidadDeArrestos): Rango
}

class Novato implements Rango {
    - siguiente()
}
class RangoDetective implements Rango {
    - siguiente()
}
class Investigador implements Rango {
    - siguiente()
}
class Sargento implements Rango {
    - siguiente()
}

class ContadorDeDificultad {
    - cantidadDeArrestos : int
    + ContadorDeDificultad(rangoInicial, arrestos)
    + ContadorDeDificultad(rangoInicial)
    + registrarArresto()
    + arrestos(): int
    + rango(): Rango
}

interface Rango {
    + {abstract}tiempoParaViaje(kms: int): int
    + {abstract}actualizar(cantidadDeArrestos: int): Rango
}

Detective "1" o-- "1" ContadorDeDificultad
ContadorDeDificultad "1" o-- "1" Rango
Novato .> RangoDetective
RangoDetective .> Investigador
Investigador .> Sargento

@enduml
