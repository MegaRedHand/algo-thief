@startuml

title "Ejemplo de construcciÃ³n de escenario para caso de uso 1"

participant ":Testcase" as testcase
participant "fuenteStub\n:FuenteDeDatos" as fuente
participant ":Algothief" as algothief

participant "escenarioBuilder\n:EscenarioBuilderManual" as escenarioBuilder
participant "cronometro\n:Cronometro" as cron
participant "montrealBuilder\n:CiudadBuilder" as montrealBuilder
participant "mexicoBuilder\n:CiudadBuilder" as mexicoBuilder

participant "bancoBuilder:BancoBuilder" as bancoBuilder
participant "novato:Novato" as novato
participant "generadorDePistas\n:GeneradorDePistasBanco" as generadorDePistas

participant "contador\n:ContadorDeDificultad" as contDificultad
participant "descripcion\n:DescripcionSospechoso" as descripcion
participant "pista:Pista" as pista
participant "banco:Edificio" as banco
participant "coordenadas\n:Coordenadas" as coordenadas
participant "ciudad: Ciudad" as ciudad
participant ":Policia" as policia
participant "escenario:Escenario" as escenario
participant "objeto:Comun" as objeto
participant "rasgo:Rasgo" as rasgo
participant ":Ladron" as ladron


activate testcase
testcase ->> fuente**: <<create>>\n FuenteDeDatos()
testcase ->> algothief**: <<create>>\n Algothief(fuenteStub)

testcase ->> novato**: <<create>>\n Novato()
testcase ->> contDificultad**: <<create>>\n ContadorDeDificultad(novato, cantidadInicialDeArrestos)

testcase -> algothief: asignarPolicia(contador)

testcase ->> escenarioBuilder**: <<create>>\n EscenarioBuilder()

testcase ->> cron**: <<create>>\n Cronometro(7)
testcase -> escenarioBuilder++: conCronometro(cronometro)
    return escenarioBuilder

testcase ->> objeto**: <<create>>\n Comun("Tesoro Nacional de Montreal", "Montreal")
testcase -> escenarioBuilder++: conObjetoRobado(objeto)
    return escenarioBuilder

testcase ->> rasgo**: <<create>>\n Rasgo("Sexo","Femenino")
testcase ->> descripcion**: <<create>>\n DescripcionSospechoso(rasgo)
testcase ->> ladron**: <<create>>\n Ladron("Carmen SanDiego", descripcion)
testcase -> escenarioBuilder: conLadron(ladron)

testcase -> escenarioBuilder: conCiudades(ciudadBuilder)

testcase ->> bancoBuilder**: <<create>>\n BancoBuilder()
activate bancoBuilder
    bancoBuilder ->> generadorDePistas**: <<create>>\n GeneradorDePistasBanco()
    deactivate bancoBuilder

testcase ->> mexicoBuilder**: CiudadBuilder(datosMexico)
testcase ->> montrealBuilder**: CiudadBuilder(datosMontreal)

testcase -> montrealBuilder++: conEdificios(bancoBuilder)
    montrealBuilder -> bancoBuilder: deCiudad("Montreal")
    return montrealBuilder

testcase -> montrealBuilder: conPistasPara(mexicoBuilder)

testcase -> algothief++: generarEscenario(escenarioBuilder)
    algothief -> escenarioBuilder++: construirCon(contador, fuenteStub)
        escenarioBuilder -> contDificultad++: rango()
            return novato
        escenarioBuilder -> montrealBuilder++: construirCon(novato, descripcion)
            montrealBuilder -> bancoBuilder++: construirCon(novato, datosMexico, descripcion)
                bancoBuilder -> novato++: generarPistaCon(generadorDePistas, datosMexico, descripcion)
                    novato -> generadorDePistas++: generarPistaFacil(datosMexico, descripcion)
                        generadorDePistas -> descripcion++: getPistaVehiculo()
                            return vehiculoLadron
                        generadorDePistas ->> pista**: <<create>>\n Pista(monedaCiudad, vehiculoLadron)
                        return pista
                    return pista
                bancoBuilder ->> banco**: <<create>>\n Edificio("Banco de Montreal", pista)
            montrealBuilder ->> coordenadas**: <<create>>\n Coordenadas(latitudMontreal, longitudMontreal)
            montrealBuilder ->> ciudad**: <<create>>\n Ciudad("Montreal", [banco], ["Mexico"], coordenadas)
            return ciudad
        escenarioBuilder ->> policia**: <<create>>\n Policia(cronometro, ciudad, contador)
        escenarioBuilder ->> escenario**: <<create>>\n Escenario(policia, ladron, [ciudad])
        return escenario
    algothief -> escenarioBuilder++: obtenerCronometro()
        return cronometro
    deactivate algothief

@enduml
