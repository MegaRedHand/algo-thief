@startuml

title "Detective Al Visitar Aeropuerto Se Despliega Pista Y Al Visitar Puerto Se Despliega Pista"

participant ":TestCase" as testcase
participant ":Detective" as detective
participant "Puerto:Edificio" as puerto
participant "Aeropuerto\n:Edificio" as aeropuerto
participant ":Cronometro" as crono
participant "novato:Rango" as rango
participant "PistaAeropuerto\n:Facil" as pistaAeropuerto
participant "PistaPuerto\n:Facil" as pistaPuerto
participant "Montreal:Ciudad" as ciudad

activate testcase
create crono
testcase ->> crono: <<create>>\n Cronometro()
create rango
testcase ->> rango: <<create>>\n Rango()
create pistaAeropuerto
testcase ->> pistaAeropuerto: <<create>>\n Facil(descripcion)
create pistaPuerto
testcase ->> pistaPuerto: <<create>>\n Facil(descripcion)
create aeropuerto
testcase ->> aeropuerto: <<create>>\n Edificio("aeropuerto")
create puerto
testcase ->> puerto: <<create>>\n Edificio("puerto")
create ciudad
testcase ->> ciudad: <<create>>\n Ciudad("Montreal", aeropuerto, puerto)
create detective
testcase ->> detective: <<create>>\n Detective(cronometro, montreal, novato)


loop 3 times
    testcase -> detective: visitar(aeropuerto)
        activate detective
        detective -> crono: restar(tiempo)
        detective -> aeropuerto: obtenerPista()
            activate aeropuerto
            return pistaDevueltaAeropuerto
        return pistaDevueltaAeropuerto
end

loop 55 times
    testcase -> detective: visitar(puerto)
        activate detective
        detective -> crono: restar(tiempo)
        detective -> puerto: obtenerPista()
            activate puerto
            return pistaDevueltaPuerto
        return pistaDevueltaPuerto
end


testcase -> testcase: assertEquals(pistaAeropuerto, pistaDevueltaAeropuerto)
activate testcase
deactivate testcase

testcase -> testcase: assertEquals(pistaPuerto, pistaDevueltaPuerto)
activate testcase
deactivate testcase

testcase-> testcase: assertEquals(168, cronometro.tiempo())
activate testcase
deactivate testcase

@enduml
