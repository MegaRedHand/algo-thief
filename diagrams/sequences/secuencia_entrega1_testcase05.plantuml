@startuml

title "Caso de uso 5 de la entrega 1\n y caso de uso 1 de la entrega 2"

participant ":Testcase1" as testcase
participant ":Algothief" as algothief
participant ":Escenario" as escenario
participant ":Policia" as policia
participant ":Cronometro" as cronometro
participant "saludable:Saludable" as saludable
participant "herido:Herido" as herido
participant "fecha\n:LocalDateTime" as fecha

activate testcase
testcase -> algothief: recibirHeridaDeCuchillo()
    activate algothief
    algothief -> escenario: policiaRecibirHeridaDeCuchillo()
        activate escenario
        escenario -> policia: recibirHeridaDeCuchillo()
            activate policia
            policia -> cronometro++: registrarHeridaDeCuchillo(saludable)
                cronometro -> saludable++: tiempoDeRecuperacion()
                    return 2
                cronometro -> cronometro: restar(2)
                deactivate
            policia -> saludable++: recibirHeridaDeCuchillo()
                saludable ->> herido**: <<create>>\n Herido()
                return salud := herido
            deactivate policia
        deactivate escenario
    deactivate algothief

testcase -> algothief: dormir()
    activate algothief
    algothief -> escenario: policiaDormir()
        activate escenario
        escenario -> policia: dormir()
            activate policia
            policia -> cronometro++: registrarDormir()
                cronometro -> cronometro--: restar(8)
            deactivate policia
        deactivate escenario
    deactivate algothief

testcase -> cronometro++: fechaActual()
    return fecha

testcase -> fecha++: getDayOfWeek()
    return diaDeLaSemana

testcase -> fecha++: getHour()
    return hora

testcase -> testcase++: assertEquals(lunes, diaDeLaSemana)
deactivate

testcase -> testcase++: assertEquals(17, hora)
deactivate

@enduml

